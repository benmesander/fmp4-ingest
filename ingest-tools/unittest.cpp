#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include "fmp4stream.h"
#include "base64.h"


// box types
char t_ftyp_b64[] = "AAAAGGZ0eXBjbWZjAAAAAGlzbzZjbWZj";
char t_free_b64[] = "AAAAKGZyZWVVU1AgYnkgQ29kZVNob3AREREREREREREREREREREREQ==";
char t_moof_b64[] = "AAAB6G1vb2YAAAAQbWZoZAAAAAAAAAABAAAB0HRyYWYAAAAcdGZoZAACACoAAAABAAAAAQAAAgABAQDAAAAAFHRmZHQBAAAAAAAAAAAAAAAAAAGYdHJ1bgAAAgUAAABgAAAB8AJAAEAAAASCAAAAIgAAABMAAAAmAAAAQQAAAQcAAAC/AAAArwAAALEAAACFAAAAdwAAAJwAAACQAAAAdgAAAFcAAABYAAAAZQAAAE8AAABaAAAAeQAAAGcAAABgAAAAfgAAAGgAAABeAAABBQAAAHIAAABSAAAAYwAAAHAAAABbAAAAWwAAAHkAAAB1AAAAaAAAAGMAAABrAAAAUQAAAGIAAAPIAAAAZgAAAGIAAACtAAAAmQAAAG8AAAB4AAAAdgAAAFoAAABiAAAAgQAAAG8AAABeAAAAlAAAAG0AAABpAAAAYgAAAGwAAABPAAAAYgAAAIgAAABYAAAAcQAAAIUAAAB3AAAAaQAAAGEAAABrAAAAUAAAAGEAAABvAAAAWgAAAFsAAACLAAAAagAAAGcAAAB2AAAAbAAAAE4AAABiAAAAhQAAAFoAAABiAAAAhwAAAHcAAABoAAAAYwAAAGsAAABPAAAAYQAAAIMAAABeAAAAWgAAAHoAAAB/AAAAYQAAAGw=";
char t_moof2_b64[] = "AAAB6G1vb2YAAAAQbWZoZAAAAAAAAAACAAAB0HRyYWYAAAAcdGZoZAACACoAAAABAAAAAQAAAgABAQDAAAAAFHRmZHQBAAAAAAAAAAAAwAAAAAGYdHJ1bgAAAgUAAABgAAAB8AJAAEAAAAeNAAAAbAAAAF4AAABoAAAAUwAAAGwAAACtAAAAUgAAAEYAAABOAAAAZAAAAEEAAABMAAAAWQAAAEoAAABKAAAAdgAAAFEAAABMAAAAWAAAAFMAAABEAAAASwAAAFcAAABMAAAASwAAAG4AAABTAAAAUQAAAE0AAABZAAAARAAAB7AAAADiAAAAdwAAAFUAAACOAAAAZwAAAE0AAABNAAAAgQAAAEAAAABMAAAAVwAAAFMAAABMAAAAeAAAAFEAAABHAAAAUAAAAGUAAABEAAAASAAAAFoAAABKAAAASgAAAH8AAABRAAAATAAAAFEAAABqAAAAPgAAAE4AAABZAAAATAAAAFgAAAB2AAAAUwAAAEsAAABPAAAAVgAAAEEAAABOAAAAWQAAAEkAAABKAAAAegAAAFEAAABHAAAATwAAAFkAAAA9AAAASwAAAFYAAABJAAAASwAAAHsAAABSAAAARwAAAEwAAABmAAAAPQAAAEwAAABVAAAASQAAAEs=";

char t_moov_b64[] = "AAACx21vb3YAAABsbXZoZAAAAAAAAAAAAAAAAAAAMAAAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIXdHJhawAAAFx0a2hkAAAABwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAEVzmkAfAAAAAABs21kaWEAAAAgbWRoZAAAAAAAAAAAAAAAAAAAMAAAAAAAFccAAAAAADJoZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVVNQIFZpZGVvIEhhbmRsZXIAAAABWW1pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAARlzdGJsAAAAmXN0c2QAAAAAAAAAAQAAAIlhdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAANwAfABIAAAASAAAAAAAAAABCkFWQyBDb2RpbmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAAM2F2Y0MBQsAU/wEAHGdCwBTbDhHu//DjYLQRAAADAAEAAAMAMB8UKuABAARoyoyyAAAAFGJ0cnQAAAAAADKG6AAGNdgAAAAQcGFzcAAALoAAACTTAAAAEHN0dHMAAAAAAAAAAAAAABBzdHNjAAAAAAAAAAAAAAAUc3RzegAAAAAAAAAAAAAAAAAAABBzdGNvAAAAAAAAAAAAAAAQc3RzcwAAAAAAAAAAAAAAPG12ZXgAAAAUbWVoZAEAAAAAAAAAAImkAAAAACB0cmV4AAAAAAAAAAEAAAABAAAAAAAAAAAAAAAA";

// full box types
char t_sidx_b64[] = "AAAIwHNpZHgAAAAAAAAAAQAAMAAAAAAAAAAAAAAAALgAADLNAADAAJAAAAAAADE9AADAAJAAAAAADvYbAADAAJAAAAAABdl4AADAAJAAAAAAAh0EAADAAJAAAAAAAWc1AADAAJAAAAAAAjzBAADAAJAAAAAAAoK1AADAAJAAAAAAAvF9AADAAJAAAAAAAmm / AADAAJAAAAAAA72FAADAAJAAAAAAA / M7AADAAJAAAAAABDmNAADAAJAAAAAAAv3yAADAAJAAAAAAAqzTAADAAJAAAAAAAVdyAADAAJAAAAAAAHlgAADAAJAAAAAAAU + XAADAAJAAAAAAAvRNAADAAJAAAAAABAI5AADAAJAAAAAAAntbAADAAJAAAAAAA3ybAADAAJAAAAAAA4H5AADAAJAAAAAAAgnsAADAAJAAAAAAAnG + AADAAJAAAAAAAoYtAADAAJAAAAAAAyzLAADAAJAAAAAAAyEuAADAAJAAAAAAA55yAADAAJAAAAAAAq74AADAAJAAAAAAA29WAADAAJAAAAAAA6oWAADAAJAAAAAAAycFAADAAJAAAAAAAfjSAADAAJAAAAAAAbc / AADAAJAAAAAAAwYVAADAAJAAAAAAAq7EAADAAJAAAAAAAteEAADAAJAAAAAAA9o7AADAAJAAAAAABCo + AADAAJAAAAAABGleAADAAJAAAAAABGMTAADAAJAAAAAAA + emAADAAJAAAAAAAnUUAADAAJAAAAAAAygPAADAAJAAAAAAAlWUAADAAJAAAAAABLh5AADAAJAAAAAAAs8tAADAAJAAAAAAAy32AADAAJAAAAAAAxwmAADAAJAAAAAAAt / 5AADAAJAAAAAABCWpAADAAJAAAAAABX10AADAAJAAAAAAA4eQAADAAJAAAAAABXrMAADAAJAAAAAAA + WpAADAAJAAAAAAAnqVAADAAJAAAAAAAs9bAADAAJAAAAAAApJmAADAAJAAAAAAAt27AADAAJAAAAAAAntoAADAAJAAAAAAAmrqAADAAJAAAAAAAoAiAADAAJAAAAAAAyzlAADAAJAAAAAAAwoeAADAAJAAAAAABCIsAADAAJAAAAAAA4 + fAADAAJAAAAAABAIAAADAAJAAAAAAA4brAADAAJAAAAAAAzHCAADAAJAAAAAAA0IvAADAAJAAAAAAA5OzAADAAJAAAAAAA1IDAADAAJAAAAAAAzciAADAAJAAAAAAApdVAADAAJAAAAAAA2QNAADAAJAAAAAAAmktAADAAJAAAAAAAkV1AADAAJAAAAAAAgFXAADAAJAAAAAAAQR3AADAAJAAAAAAAgBwAADAAJAAAAAAAUwoAADAAJAAAAAAAcLVAADAAJAAAAAAAyQMAADAAJAAAAAAAlkxAADAAJAAAAAAAnaHAADAAJAAAAAAAnhZAADAAJAAAAAAA06sAADAAJAAAAAAAp / HAADAAJAAAAAAArTDAADAAJAAAAAAAg20AADAAJAAAAAAAdcMAADAAJAAAAAAArw2AADAAJAAAAAAAwjhAADAAJAAAAAABHrHAADAAJAAAAAAA1E4AADAAJAAAAAAAqGQAADAAJAAAAAAApamAADAAJAAAAAAAq3BAADAAJAAAAAAAntuAADAAJAAAAAAA4EpAADAAJAAAAAAAu29AADAAJAAAAAAAq3qAADAAJAAAAAAAvk2AADAAJAAAAAABY9bAADAAJAAAAAAA9LQAADAAJAAAAAAA2DcAADAAJAAAAAAAj1HAADAAJAAAAAAA1LTAADAAJAAAAAAA + zQAADAAJAAAAAAA5hgAADAAJAAAAAAAr68AADAAJAAAAAAArS6AADAAJAAAAAAAxDBAADAAJAAAAAAA33oAADAAJAAAAAAA3ylAADAAJAAAAAABG6mAADAAJAAAAAABhDaAADAAJAAAAAABPR7AADAAJAAAAAABMwtAADAAJAAAAAAAt1jAADAAJAAAAAAApiTAADAAJAAAAAAAxAjAADAAJAAAAAAA8ILAADAAJAAAAAAA3f7AADAAJAAAAAAA7lIAADAAJAAAAAAAnVPAADAAJAAAAAAArWXAADAAJAAAAAAAzo + AADAAJAAAAAAAhGOAADAAJAAAAAAA3EfAADAAJAAAAAAA5wiAADAAJAAAAAAAhNAAADAAJAAAAAAAYmoAADAAJAAAAAAAgz + AADAAJAAAAAAAzaVAADAAJAAAAAAAsqwAADAAJAAAAAAAp2iAADAAJAAAAAAAZ9UAADAAJAAAAAAAhXOAADAAJAAAAAAAmJIAADAAJAAAAAAA1MFAADAAJAAAAAABEdJAADAAJAAAAAABGfEAADAAJAAAAAAA8iaAADAAJAAAAAAAxxBAADAAJAAAAAAAsv0AADAAJAAAAAAAmVhAADAAJAAAAAAA5djAADAAJAAAAAAA / FZAADAAJAAAAAAA6igAADAAJAAAAAAAzA5AADAAJAAAAAAA7WSAADAAJAAAAAAAs3SAADAAJAAAAAAA15gAADAAJAAAAAAAyjUAADAAJAAAAAAAul7AADAAJAAAAAAAYqwAADAAJAAAAAAAlASAADAAJAAAAAAAuINAADAAJAAAAAAA2MbAADAAJAAAAAAA15LAADAAJAAAAAAAy0BAADAAJAAAAAAA7V5AADAAJAAAAAABIqNAADAAJAAAAAABKWZAADAAJAAAAAABCtAAADAAJAAAAAAA / uhAADAAJAAAAAAA + 4xAADAAJAAAAAAA7EUAADAAJAAAAAAA + jmAADAAJAAAAAAA7HzAADAAJAAAAAAA9KrAADAAJAAAAAAA0ggAADAAJAAAAAAAh8FAADAAJAAAAAAAVKAAADAAJAAAAAAAGjeAADAAJAAAAAAAlW2AADAAJAAAAAAA4hmAADAAJAAAAAABAQEAADAAJAAAAAAAz4cAADAAJAAAAAAAvKqAADAAJAAAAAAAXlDAADAAJAAAAAAAA2BAABkAJAAAAA=";

TEST_CASE("test fmp4 stream support for box", "[fmp4_stream_box]") {

	SECTION("parse box") 
	{
	    fmp4_stream::box b;
		std::vector<uint8_t> bin_dat = base64_decode(t_ftyp_b64);
		b.parse((const char *)&bin_dat[0]);

		REQUIRE(b.box_type_ .compare("ftyp") == 0);
		REQUIRE(b.read_size() == bin_dat.size());

		b= fmp4_stream::box();
		bin_dat = base64_decode(t_moof_b64);
		b.parse((const char *)&bin_dat[0]);
		REQUIRE(b.box_type_.compare("moof") == 0);
		REQUIRE(b.read_size() == bin_dat.size());

		b = fmp4_stream::box();
		bin_dat = base64_decode(t_moof2_b64);
		b.parse((const char *)&bin_dat[0]);
		REQUIRE(b.box_type_.compare("moof") == 0);
		REQUIRE(b.read_size() == bin_dat.size());

		b = fmp4_stream::box();
		bin_dat = base64_decode(t_moov_b64);
		b.parse((const char *)&bin_dat[0]);
		REQUIRE(b.read_size() == bin_dat.size());
		REQUIRE(b.box_type_.compare("moov") == 0);

		b = fmp4_stream::box();
		bin_dat = base64_decode(t_free_b64);
		b.parse((const char *)&bin_dat[0]);
		REQUIRE(b.box_type_.compare("free") == 0);
		REQUIRE(b.read_size() == bin_dat.size());
	}
	/*
	SECTION("parse full box") 
	{
		fmp4_stream::full_box b;
		std::vector<uint8_t> bin_dat = base64_decode(t_sidx_b64);
		b.parse((const char *)&bin_dat[0]);
		REQUIRE(b.box_type_.compare("sidx") == 0);
		REQUIRE(b.read_size() == bin_dat.size());
	}*/
}


TEST_CASE("test emsg support", "[emsg]") {

	SECTION("parse emsg v1")
	{

	}

	SECTION("parse emsg v0")
	{

	}

}

TEST_CASE("test emsg track", "[emsg_track]") {

	SECTION("generate sparse moov")
	{

	}

	SECTION("parse emsg track")
	{

	}
	SECTION("create emsg track")
	{

	}
	SECTION("write to DASH Event Stream")
	{

	}
}


TEST_CASE("test SCTE-35 support", "[scte-35]") {

	SECTION("splice info")
	{

	}

	SECTION("generate splice insert")
	{

	}

}

TEST_CASE("ingest stream support", "[ingest_stream]") {

	SECTION("read from file & write to file")
	{

	}

	SECTION("get init segment")
	{

	}

	SECTION("get media segment")
	{

	}
	SECTION("test duration")
	{

	}
	SECTION("test patching with duration")
	{

	}

}